#!/bin/bash

# Thanks to
#
# - https://raw.github.com/derekwyatt/vim-config/master/bundle/get
# - https://github.com/brianleroux/quick-vim
#
# The following script combines Derek's `bundle/get` script, parsing the
# content of a markdown file to figure out the plugin listing, with
# the commands provided by quick-vim.
#
# It must be invoked with at least one arg, one of:
#
# - install: go through each bundle and git clone them
# - update: go through each bundle and git pull them
# - clean: go through each bundle and remove the directory
# - list: See the list of bundles parsed from the .md file
#
#
# It parses a local `readme.md` looking for the following pattern:
#
#     - **plugin**: `git clone <repo>`
#
# `**plugin**` is parsed and `plugin` is then considered as the plugin
# name, cloning it into `bundle/plugin`. The cmd between backsticks
# (usually a git clone command) is parsed and exectuted when `install`
# is executed.

# markdown file to parse
file=readme.md

# build the plugin listing
pluglist="$(grep '^- \*' $file | sed 's/^....\([^:]*\)..:.*$/\1/')"

help () {
  cat<<EOF

  Usage: pathogenify [install|clean|update|list|installed|help]

  Commands:

    install   go through each bundle and git clone them
    clean     go through each bundle and remove the directory
    update    go through each bundle and git pull them
    list      see the list of bundles parsed from the .md file
    installed see the list of bundles actually installed
    help      print this msg

EOF
}

run () {
  local cmds='install clean update help list installed'
  local running=$1

  # alias ls to list
  [ "$running" == "ls" ] && running=list

  for command in $cmds; do
    if [ "$command" == "$running" ]; then
      cmd=$running
    fi
  done

  if [ ! $cmd ]; then
    [[ $running ]] && echo Invalid command $1
    help
    exit 1
  fi

  $running
}

bundle () {
  local iterator=$1
  for f in $pluglist; do
    dir=bundle/$f
    clone="$(grep $f $file | sed 's/.*`\(.*\)`.*$/\1/')"
    $iterator "$dir" "$clone"
  done
}

# Install
# -------

install () {
  echo ... Installing $pluglist ...
  echo
  mkdir -p bundle
  bundle installone
}

installone () {
  local dir=$1
  local clone="$2 $1"
  if [[ ! -d "$dir" ]]; then
    echo "   Install $dir"
    eval $clone
  else
    echo "      Skip $dir"
  fi
}

# Clean
# -----

clean () {
  echo ... Uninstalling $pluglist ...
  echo
  bundle cleanone
}

cleanone () {
  local dir=$1
  if [[ -d "$dir" ]]; then
    echo "   Uninstall $dir"
    rm -rf $dir
  else
    echo "        Skip $dir (unexisting)"
  fi
}

# Update
# ------

clean () {
  echo ... Uninstalling $pluglist ...
  echo
  bundle cleanone
}

cleanone () {
  local dir=$1
  if [[ -d "$dir" ]]; then
    echo "   Uninstall $dir"
    rm -rf $dir
  else
    echo "        Skip $dir (unexisting)"
  fi
}


# List
# ----

list () {
  echo ... Listing bundles from $file ...
  echo
  for f in $pluglist; do
    dir=bundle/$f
    clone="$(grep $f $file | sed 's/.*`\(.*\)`.*$/\1/')"
    clone="$clone $dir"
    echo "  - $f:  $clone"
  done
}

# Installed
# ---------

installed () {
  bundles=$(ls bundle)
  for f in $bundles; do
    dir=bundle/$f
    echo "  - $f: $dir"
  done
}

run $1
