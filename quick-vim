#!/bin/bash

#
# quick-vim install script
#
# borrowed to https://github.com/brianleroux/quick-vim and tweaked here to
# match the repository structure
#
# XXX turn this into a node script file, most likely packaged and npm
# link-able. This should add the necessary checks to update the config
# filenames if run on win32.
#
set -e

help () {
  cat<<EOF

  Usage: quick-vim [install|uninstall|upgrade|help]

  Commands:

  install    installs from the git repo
  uninstall  restores original system vim config
  upgrade    clobbers existing setup and installs fresh from git
  help       print this msg

EOF
}

# backs default home vim up
backup () {
  if [ -e ~/backup-vim ]; then
    echo 'skipping backup'
  else
    mkdir -p ~/backup-vim
    [ -e ~/.vimrc ] && mv ~/.vimrc ~/backup-vim/.vimrc
    [ -e ~/.vim ] && cp -r ~/.vim ~/backup-vim/.vim
  fi
}

# copy in pathogen and then clone in bundles
install () {
  # backup everything (.vimrc, .vim dir)
  backup

  # copy in *rc files
  cp vimrc ~/.vimrc
  cp gvimrc ~/.gvimrc
  cp vimrc.local ~/.vimrc.local
  cp gvimrc.local ~/.gvimrc.local

  # add in bundles from bundle.txt
  mkdir -p ~/.vim/bundle
  bundles=$(cat ./bundles.txt)
  cd ~/.vim/bundle
  for repo in $bundles; do
    last=${repo##*\/}
    dir=$(echo $last | sed 's/.git$//')
    [ -e $dir ] && echo skipping $dir instal
    [ -e $dir ] || git clone $repo
  done
}

# if backup exists clobbers home vim and copies in backup
uninstall () {
  if [ -e ~/backup-vim ]
  then
    rm ~/.vimrc
    rm -rf ~/.vim
    mv ~/backup-vim/.vimrc ~/.vimrc
    mv ~/backup-vim/.vim ~/.vim
    rm -rf ~/backup-vim
  fi
}

# kills everything, pulls latest from git, installs it
upgrade () {
  uninstall
  git pull origin master
  install
}

# fucking cryptic bash, test for a valid arg and execute it if so; otherwise show the help
if [ "$1" != "" ]; then
  wl=(install uninstall upgrade help)
  for i in "${wl[@]}"
  do
    if [ "$i" == "$1" ]
    then
      $1
      exit 0
    fi
  done
fi

# show on failure some help
help
exit 0
