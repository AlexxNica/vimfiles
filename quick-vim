#!/bin/bash

#
# quick-vim install script
#
# borrowed to https://github.com/brianleroux/quick-vim and tweaked here to
# match the repository structure
#
# XXX turn this into a node script file, most likely packaged and npm
# link-able. This should add the necessary checks to update the config
# filenames if run on win32.
#
set -e

help () {
  cat<<EOF

  Usage: quick-vim [install|uninstall|upgrade|help]

  Commands:

  install    installs from the git repo
  uninstall  restores original system vim config
  upgrade    clobbers existing setup and installs fresh from git
  update     goes through all the pathogen bundles in bundles.txt and either
             cloned them or pull latest from master
  help       print this msg

EOF
}

# backs default home vim up
backup () {
  if [ -e ~/backup-vim ]; then
    echo 'skipping backup'
  else
    mkdir -p ~/backup-vim
    [ -e ~/.vimrc ] && mv ~/.vimrc ~/backup-vim/.vimrc
    [ -e ~/.vim ] && cp -r ~/.vim ~/backup-vim/.vim
  fi
}

# copy in pathogen and then clone in bundles
install () {
  # backup everything (.vimrc, .vim dir)
  backup

  # Setup in *rc files
  echo """
\" Include user's local vim config
if filereadable(expand('~/.vim/vimrc'))
  source ~/.vim/vimrc
elseif filereadable(expand('~/vimfiles/vimrc'))
  source ~/vimfiles/vimrc
endif
""" > ~/.vimrc

  echo """
\" Include user's local graphical vim config
if filereadable(expand('~/.vim/gvimrc'))
  source ~/.vim/gvimrc
elseif filereadable(expand('~/vimfiles/gvimrc'))
  source ~/vimfiles/gvimrc
endif
""" > ~/.gvimrc

  update
}

# goes through all the bundle and either cloned them or pull
update() {
  # add in bundles from bundle.txt
  mkdir -p ~/.vim/bundle
  bundles=$(cat ./bundles.txt)
  cd ~/.vim/bundle
  for repo in $bundles; do
    last=${repo##*\/}
    dir=$(echo $last | sed 's/.git$//')
    [ -e $dir ] && cd $dir && git pull origin master && cd ../
    [ -e $dir ] || git clone $repo
  done
}

# if backup exists clobbers home vim and copies in backup
uninstall () {
  if [ -e ~/backup-vim ]
  then
    rm ~/.vimrc
    rm -rf ~/.vim
    mv ~/backup-vim/.vimrc ~/.vimrc
    mv ~/backup-vim/.vim ~/.vim
    rm -rf ~/backup-vim
  fi
}

# kills everything, pulls latest from git, installs it
upgrade () {
  uninstall
  git pull origin master
  install
}

# fucking cryptic bash, test for a valid arg and execute it if so; otherwise show the help
if [ "$1" != "" ]; then
  wl=(install uninstall upgrade update help)
  for i in "${wl[@]}"
  do
    if [ "$i" == "$1" ]
    then
      $1
      exit 0
    fi
  done
fi

# show on failure some help
help
exit 0
