
"
" I'm more and more tempted to split the whole vim configuration into tiny
" sourced scripts, organized per topic thing. Or just stick with the single big
" one.
"

" remove any trailing whitespace on file save.
au BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Mappings
" ========

" Shift+left to switch to prev tab
" Shift+right to switch to next
nmap <silent> <S-left>      :tabprevious<CR>
nmap <silent> <S-right>     :tabnext<CR>

" Ctrl+arrow keys to switch between window
nmap <silent> <C-left>      :wincmd h<CR>
nmap <silent> <C-right>     :wincmd l<CR>
nmap <silent> <C-down>      :wincmd j<CR>
nmap <silent> <C-up>        :wincmd k<CR>

" bonus Shift+ up / down same as Ctrl + up / down
nmap <silent> <S-down>      :wincmd j<CR>
nmap <silent> <S-up>        :wincmd k<CR>

" `tt` in normal mode to toggle comments
noremap tt :TComment<CR>


" gist-vim
" --------
"

" goes private by default
let g:gist_private = 1


" Misc
" ====

" set filetype to js for files with node shebang thing these files don't have
" an extension. pretty sure there is a plugin for this, for a bunch of
" filetype.
function! s:NodeAndTheBang(name)
  let nodebang = matchstr(getline(1), "^#.*". a:name)
  if nodebang != ''
    set ft=javascript
  endif
endfunction

" call this shebang check on every bufread or newfile
autocmd! BufRead,BufNewFile * call s:NodeAndTheBang('node')
autocmd! BufRead,BufNewFile * call s:NodeAndTheBang('phantomjs')

" Experimental path manipulation
" ------------------------------
" (not runtime, see `:h path`, `:h path` and `:h suffixesadd`)
"
" It's all about getting the :find and `gf` mapping to work with relative
" dependencies, such as in an AMD or node (commonjs style) project. It's not
" strictly related to .js files though, any file extension is treated the
" same. `.coffee` script files should work. As long as the file below the
" cursor refers to a file relative to the current buffer, this should work.

" This update the `path` option to include both the working directory (as :pwd
" returns) and the relative to the current buffer working directory.
function! s:updatePath()
  " dirname of the current buffer
  let bufpath = expand('%:h')
  " remove last component in the path option

  let &path=','
  " add the new one, the current relative dir for buffer
  let &path = join([&path, bufpath . '/'], ',')
  " and the actual current working directory
  let &path = join([&path, getcwd() . '/'], ',')

endfunction

" udpate the suffixesadd option (:h 'suffixesadd') to include the current
" buffer extension, whatever it is.
function! s:updateSuffixAdd()
  " get the current buffer extension
  let ext = '.' . expand('%:e')

  " when no extensions (case of scripts with shebang), try to guess
  " extension from filetype
  if ext == '.'
    let ft = &filetype
    if ft == 'javascript'
      let ext = '.js'
    else
      let ext = '.' . &filetype
    endif
  endif

  " first make sure we don't add extensions twice
  " remove the ext, from the path option, if it was added before
  let &suffixesadd = substitute(&suffixesadd, "," . ext, '', '')
  " and add the new one
  let &suffixesadd = join([&suffixesadd, ext], ',')
endfunction

augroup updatepath
  autocmd!
  autocmd BufNewFile,BufEnter  * call s:updatePath()
  autocmd BufNewFile,BufEnter  * call s:updateSuffixAdd()
augroup END
